from fastapi import FastAPI, HTTPException, Header, Body, Depends
from pydantic import BaseModel
from typing import Optional

app = FastAPI()

# Example user data
users_db = {
    "user1": {
        "password": "oldpassword"
    }
}

# Stub function for token verification
def verify_token(token: str) -> str:
    # In a real application, you would verify the token and retrieve the user ID
    if token == "valid_token":
        return "user1"
    else:
        raise HTTPException(status_code=401, detail="Invalid token")

# Pydantic model for the request body
class PasswordResetRequest(BaseModel):
    old_password: str
    new_password: str

@app.post("/forgot-password")
async def forgot_password(
    token: str = Header(...),
    password_data: PasswordResetRequest = Body(...)
):
    user_id = verify_token(token)
    user = users_db.get(user_id)

    if user is None:
        raise HTTPException(status_code=404, detail="User not found")
    
    if user["password"] != password_data.old_password:
        raise HTTPException(status_code=400, detail="Old password is incorrect")
    
    # Update the user's password
    user["password"] = password_data.new_password

    return {"message": "Password updated successfully"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
